// --- Cart Logic ---
let cart = JSON.parse(localStorage.getItem('cart') || '[]');
const cartContainer = document.getElementById('cart-container');
const totalPriceEl = document.getElementById('total-price');
const checkoutBtn = document.getElementById('checkout-button');
const selectAllCheckbox = document.getElementById('select-all');

function renderCart() {
    // üîí L∆∞u tr·∫°ng th√°i t√≠ch ch·ªçn c·ªßa c√°c checkbox hi·ªán t·∫°i tr∆∞·ªõc khi render l·∫°i
    const selectedIndexes = new Set(
        Array.from(document.querySelectorAll('.select-item:checked'))
            .map(cb => parseInt(cb.dataset.idx)) // Chuy·ªÉn ƒë·ªïi idx sang s·ªë
    );

    cartContainer.innerHTML = ''; // X√≥a to√†n b·ªô n·ªôi dung gi·ªè h√†ng hi·ªán t·∫°i
    if (cart.length === 0) {
        cartContainer.innerHTML = '<p style="color:#888;">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</p>';
        totalPriceEl.textContent = 'T·ªïng c·ªông: 0‚Ç´';
        checkoutBtn.disabled = true;
        if (selectAllCheckbox) selectAllCheckbox.checked = false; // B·ªè ch·ªçn "Ch·ªçn t·∫•t c·∫£" n·∫øu gi·ªè h√†ng tr·ªëng
        return;
    }

    cart.forEach((item, idx) => {
        // ƒê·∫£m b·∫£o quantity v√† price lu√¥n l√† s·ªë khi ƒë·ªçc t·ª´ item
        const quantity = parseInt(item.quantity) || 1;
        const title = item.title || item.name || 'S·∫£n ph·∫©m kh√¥ng t√™n';
        const price = parseFloat(item.price) || 0;
        // --- B·∫ÆT ƒê·∫¶U C√ÅC D√íNG DEBUG M·ªöI T·∫†I ƒê√ÇY ---
        console.log('DEBUG (Cart.js): D·ªØ li·ªáu g·ªëc c·ªßa m·ª•c gi·ªè h√†ng (item):', item);
        console.log('DEBUG (Cart.js): Gi√° t·ª´ item.price:', item.price, 'Ki·ªÉu d·ªØ li·ªáu:', typeof item.price);
        console.log('DEBUG (Cart.js): Gi√° sau khi parseFloat (bi·∫øn price):', price, 'Ki·ªÉu d·ªØ li·ªáu:', typeof price);
        console.log('DEBUG (Cart.js): Gi√° sau khi ƒë·ªãnh d·∫°ng (toLocaleString):', price.toLocaleString('vi-VN') + '‚Ç´');
        // --- K·∫æT TH√öC C√ÅC D√íNG DEBUG M·ªöI T·∫†I ƒê√ÇY ---
        const img = item.img || item.imgSrc || 'img/default.jpg';

        const div = document.createElement('div');
        div.className = 'cart-item';
        div.innerHTML = `
            <div class="cart-checkbox-col">
                <input type="checkbox" class="select-item" data-idx="${idx}" ${selectedIndexes.has(idx) ? 'checked' : ''}>
            </div>
            <div class="cart-image-wrapper">
                <img src="${img}" alt="${title}" class="cart-item-img">
            </div>
            <div class="cart-item-details">
                <h4 class="cart-item-title">${title}</h4>
                <p class="cart-item-price">ƒê∆°n gi√°: ${price.toLocaleString('vi-VN')}‚Ç´</p>
            </div>
            <div class="cart-item-qty">
                <button class="qty-btn" data-action="decrease" data-idx="${idx}">-</button>
                <span>${quantity}</span>
                <button class="qty-btn" data-action="increase" data-idx="${idx}">+</button>
            </div>
            <div class="cart-item-price-col">
                <p class="item-total-price">${((price || 0) * (quantity || 1)).toLocaleString('vi-VN')}‚Ç´</p>
            </div>
            <button class="remove-btn" data-idx="${idx}">X√≥a</button>
        `;
        cartContainer.appendChild(div);
    });

    // G·∫Øn l·∫°i s·ª± ki·ªán cho c√°c n√∫t sau khi render l·∫°i DOM
    // L·∫∑p qua c√°c n√∫t m·ªõi ƒë∆∞·ª£c t·∫°o
    document.querySelectorAll('.qty-btn').forEach(button => {
        button.addEventListener('click', updateQuantity);
    });
    document.querySelectorAll('.remove-btn').forEach(button => {
        button.addEventListener('click', removeItem);
    });
    document.querySelectorAll('.select-item').forEach(checkbox => {
        checkbox.addEventListener('change', updateCartTotal);
    });

    // G·∫Øn s·ª± ki·ªán cho n√∫t "Ch·ªçn t·∫•t c·∫£" n·∫øu n√≥ t·ªìn t·∫°i
    if (selectAllCheckbox) {
        selectAllCheckbox.checked = (cart.length > 0 && selectedIndexes.size === cart.length); // C·∫≠p nh·∫≠t tr·∫°ng th√°i "Ch·ªçn t·∫•t c·∫£"
        // Quan tr·ªçng: G·ª° b·ªè event listener c≈© tr∆∞·ªõc khi g·∫Øn l·∫°i ƒë·ªÉ tr√°nh g·∫Øn nhi·ªÅu l·∫ßn
        selectAllCheckbox.removeEventListener('change', handleSelectAllChange);
        selectAllCheckbox.addEventListener('change', handleSelectAllChange);
    }

    updateCartTotal(); // C·∫≠p nh·∫≠t t·ªïng gi√° gi·ªè h√†ng sau khi render
}

function handleSelectAllChange() {
    document.querySelectorAll('.select-item').forEach(cb => {
        cb.checked = this.checked;
    });
    updateCartTotal();
}

function updateQuantity(e) {
    const action = e.target.dataset.action;
    const idx = parseInt(e.target.dataset.idx);

    // --- DEBUGGING: Ki·ªÉm tra gi√° tr·ªã v√† ki·ªÉu d·ªØ li·ªáu ---
    console.log(`Clicked ${action} button for index: ${idx}`);
    console.log(`Current cart array length: ${cart.length}`);

    // === Ki·ªÉm tra k·ªπ tr∆∞·ªõc khi truy c·∫≠p item ===
    if (idx < 0 || idx >= cart.length || !cart[idx]) {
        console.error(`Error: Item at index ${idx} not found or out of bounds. This indicates a desynchronization between DOM and cart data.`);
        console.log("Current cart state:", JSON.parse(JSON.stringify(cart))); // Deep copy for inspection
        // Th·ª≠ re-render ƒë·ªÉ ƒë·ªìng b·ªô l·∫°i
        renderCart();
        return; // Tho√°t n·∫øu kh√¥ng t√¨m th·∫•y item
    }
    // === END Ki·ªÉm tra ===

    console.log(`Current item in cart:`, cart[idx]);
    console.log(`Current quantity (before update): ${cart[idx].quantity}, type: ${typeof cart[idx].quantity}`);


    if (action === 'increase') {
        cart[idx].quantity = (parseInt(cart[idx].quantity) || 0) + 1;
    } else if (action === 'decrease') {
        if ((parseInt(cart[idx].quantity) || 0) > 1) {
            cart[idx].quantity = (parseInt(cart[idx].quantity) || 0) - 1;
        } else {
            if (confirm(`B·∫°n c√≥ mu·ªën x√≥a s·∫£n ph·∫©m "${cart[idx].title || cart[idx].name}" kh·ªèi gi·ªè h√†ng?`)) {
                removeItemLogic(idx); // G·ªçi h√†m logic x√≥a tr·ª±c ti·∫øp
                return; // Tho√°t kh·ªèi h√†m updateQuantity sau khi x√≥a
            }
        }
    }

    console.log(`New quantity (after update): ${cart[idx].quantity}, type: ${typeof cart[idx].quantity}`);

    localStorage.setItem('cart', JSON.stringify(cart));
    renderCart();
    updateCartCount();
}

function removeItem(e) {
    const idx = parseInt(e.target.dataset.idx);
    removeItemLogic(idx); // G·ªçi h√†m logic x√≥a
}

// H√†m logic x√≥a ri√™ng ƒë·ªÉ t√°i s·ª≠ d·ª•ng
function removeItemLogic(idxToRemove) {
    console.log(`Attempting to remove item at index: ${idxToRemove}`);
    console.log("Cart before removal:", JSON.parse(JSON.stringify(cart)));

    if (idxToRemove >= 0 && idxToRemove < cart.length) {
        cart.splice(idxToRemove, 1);
        localStorage.setItem('cart', JSON.stringify(cart));
        renderCart();
        updateCartCount();
        console.log("Cart after removal:", JSON.parse(JSON.stringify(cart)));
    } else {
        console.error(`Error: Cannot remove item. Index ${idxToRemove} is out of bounds for cart length ${cart.length}.`);
    }
}

function updateCartTotal() {
    let total = 0;
    // L·∫∑p qua t·∫•t c·∫£ c√°c checkbox select-item ƒë∆∞·ª£c t√≠ch ch·ªçn
    document.querySelectorAll('.select-item:checked').forEach(checkbox => {
        const idx = parseInt(checkbox.dataset.idx);
        const item = cart[idx]; // L·∫•y item t·ª´ m·∫£ng cart d·ª±a tr√™n index
        if (item) { // ƒê·∫£m b·∫£o item t·ªìn t·∫°i
            total += (parseFloat(item.price) || 0) * (parseInt(item.quantity) || 0);
        }
    });
    totalPriceEl.textContent = `T·ªïng c·ªông: ${total.toLocaleString('vi-VN')}‚Ç´`;
    checkoutBtn.disabled = total === 0; // V√¥ hi·ªáu h√≥a n√∫t thanh to√°n n·∫øu t·ªïng b·∫±ng 0
}

function updateCartCount() {
    let count = cart.reduce((sum, item) => sum + (parseInt(item.quantity) || 1), 0);
    let cartLink = document.querySelector('#navbar a[href="cart.html"]');
    if (cartLink) {
        let icon = cartLink.querySelector('.fa-bag-shopping');
        if (icon) {
            let badge = icon.nextElementSibling;
            if (!badge || !badge.classList.contains('cart-badge')) {
                badge = document.createElement('span');
                badge.className = 'cart-badge';
                badge.style = 'background:#ff4d4f;color:#fff;border-radius:50%;padding:2px 7px;font-size:0.8em;margin-left:4px;';
                icon.after(badge);
            }
            badge.textContent = count;
            badge.style.display = count ? 'inline-block' : 'none';
        }
    }
}

// Initial calls
renderCart();
updateCartCount();

// L·∫Øng nghe s·ª± ki·ªán storage ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng khi c√≥ thay ƒë·ªïi t·ª´ tab/c·ª≠a s·ªï kh√°c
window.addEventListener('storage', function(e) {
    if (e.key === 'cart') {
        cart = JSON.parse(localStorage.getItem('cart') || '[]');
        renderCart();
        updateCartCount();
    }
});
// --- Payment Modal Logic ---
// L·∫•y c√°c ph·∫ßn t·ª≠ c·∫ßn thi·∫øt t·ª´ DOM
const paymentModal = document.getElementById('payment-modal');
const closePaymentModalX = document.getElementById('close-payment-modal-x');
const closeModalBtn = document.getElementById('close-modal-btn');
const bankTransferBtn = document.getElementById('bank-transfer-btn');
const cashPaymentBtn = document.getElementById('cash-payment-btn');
const bankInfo = document.getElementById('bank-info');
const cashForm = document.getElementById('cash-form');
const confirmBankBtn = document.getElementById('confirm-bank');
const confirmCashBtn = document.getElementById('confirm-cash');
const successModal = document.getElementById('success-modal');
const successCloseBtn = document.getElementById('success-close-btn');

// M·ªü modal khi nh·∫•n n√∫t checkout
if (checkoutBtn) {
    checkoutBtn.addEventListener('click', function () {
        paymentModal.style.display = 'block';
    });
}

// ƒê√≥ng modal thanh to√°n
function closePaymentModal() {
    paymentModal.style.display = 'none';
    bankInfo.style.display = 'none';
    cashForm.style.display = 'none';
}
if (closePaymentModalX) closePaymentModalX.addEventListener('click', closePaymentModal);
if (closeModalBtn) closeModalBtn.addEventListener('click', closePaymentModal);

// Hi·ªÉn th·ªã form chuy·ªÉn kho·∫£n
if (bankTransferBtn) {
    bankTransferBtn.addEventListener('click', function () {
        bankInfo.style.display = 'block';
        cashForm.style.display = 'none';
    });
}

// Hi·ªÉn th·ªã form thanh to√°n khi nh·∫≠n h√†ng
if (cashPaymentBtn) {
    cashPaymentBtn.addEventListener('click', function () {
        cashForm.style.display = 'block';
        bankInfo.style.display = 'none';
    });
}

// X√°c nh·∫≠n chuy·ªÉn kho·∫£n
if (confirmBankBtn) {
    confirmBankBtn.addEventListener('click', function () {
        const checkbox = document.getElementById('confirm-transfer-checkbox');
        if (checkbox.checked) {
            paymentModal.style.display = 'none';
            successModal.style.display = 'block';
        } else {
            alert('Vui l√≤ng x√°c nh·∫≠n ƒë√£ chuy·ªÉn kho·∫£n.');
        }
    });
}

// X√°c nh·∫≠n thanh to√°n ti·ªÅn m·∫∑t
if (confirmCashBtn) {
    confirmCashBtn.addEventListener('click', function () {
        const name = document.getElementById('name').value;
        const phone = document.getElementById('phone').value;
        const address = document.getElementById('address').value;

        if (name && phone && address) {
            paymentModal.style.display = 'none';
            successModal.style.display = 'block';
        } else {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');
        }
    });
}

// ƒê√≥ng modal th√†nh c√¥ng
if (successCloseBtn) {
    successCloseBtn.addEventListener('click', function () {
        successModal.style.display = 'none';
    });
}